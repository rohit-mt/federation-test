schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

interface Error {
  code: ErrorCode!
  message: String!
}

enum ErrorCode {
  AUTHENTICATION_ERROR
  NETWORK_ERROR
  SERVER_ERROR
  UNKNOWN_ERROR
}

type Query {
  allSeries: [series!]! @join__field(graph: SERIES_APP)
  series(id: ID!): series @join__field(graph: SERIES_APP)
  user(id: ID!): User @join__field(graph: USERS_APP)
  users: [User!]! @join__field(graph: USERS_APP)
}

type Response implements Error {
  code: ErrorCode!
  message: String!
}

type User
  @join__owner(graph: USERS_APP)
  @join__type(graph: USERS_APP, key: "id")
  @join__type(graph: SERIES_APP, key: "id")
{
  assignedSeries: [series!]! @join__field(graph: SERIES_APP)
  emailId: String! @join__field(graph: USERS_APP)
  id: ID! @join__field(graph: USERS_APP)
  name: String! @join__field(graph: USERS_APP)
  username: String! @join__field(graph: USERS_APP)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  SERIES_APP @join__graph(name: "series-app" url: "http://localhost:5002")
  USERS_APP @join__graph(name: "users-app" url: "http://localhost:5001")
}

type series {
  id: ID!
  name: String!
}
